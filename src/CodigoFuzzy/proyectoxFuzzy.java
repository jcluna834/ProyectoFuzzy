//++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//                                                      //
// Class:  proyectoxFuzzy                           //
//                                                      //
// Author: Automatically generated by Xfuzzy            //
//                                                      //
// Description: Fuzzy inference engine "proyectoxFuzzy"       //
//                                                      //
//++++++++++++++++++++++++++++++++++++++++++++++++++++++//

package CodigoFuzzy;

public class proyectoxFuzzy implements FuzzyInferenceEngine {

 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//
 //  Rulebase RL_misreglas  //
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//

 private MembershipFunction[] RL_misreglas(MembershipFunction punt, MembershipFunction numequiv, MembershipFunction cantpalabras) {
  double _rl;
  double _input[] = new double[3];
  if(punt instanceof FuzzySingleton)
   _input[0] = ((FuzzySingleton) punt).getValue();
  if(numequiv instanceof FuzzySingleton)
   _input[1] = ((FuzzySingleton) numequiv).getValue();
  if(cantpalabras instanceof FuzzySingleton)
   _input[2] = ((FuzzySingleton) cantpalabras).getValue();
  OP_proyectoxFuzzy_misoperadores _op = new OP_proyectoxFuzzy_misoperadores();
  OutputMembershipFunction dificultad = new OutputMembershipFunction();
  dificultad.set(18,_op,_input);
  TP_proyectoxFuzzy_puntaje _t_punt = new TP_proyectoxFuzzy_puntaje();
  TP_proyectoxFuzzy_numeroequivocaciones _t_numequiv = new TP_proyectoxFuzzy_numeroequivocaciones();
  TP_proyectoxFuzzy_cantidadpalabras _t_cantpalabras = new TP_proyectoxFuzzy_cantidadpalabras();
  TP_proyectoxFuzzy_dificultadjuego _t_dificultad = new TP_proyectoxFuzzy_dificultadjuego();
  int _i_dificultad=0;
  _rl = _op.and(_op.and(_t_punt.bajo.isEqual(punt),_t_numequiv.bajo.isEqual(numequiv)),_t_cantpalabras.bajo.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.buscarpalabra); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.bajo.isEqual(punt),_t_numequiv.bajo.isEqual(numequiv)),_t_cantpalabras.medio.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.buscarpalabra); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.bajo.isEqual(punt),_t_numequiv.bajo.isEqual(numequiv)),_t_cantpalabras.alto.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.hacerparejas); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.bajo.isEqual(punt),_t_numequiv.alto.isEqual(numequiv)),_t_cantpalabras.bajo.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.buscarpalabra); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.bajo.isEqual(punt),_t_numequiv.alto.isEqual(numequiv)),_t_cantpalabras.medio.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.hacerparejas); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.bajo.isEqual(punt),_t_numequiv.alto.isEqual(numequiv)),_t_cantpalabras.alto.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.hacerparejas); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.normal.isEqual(punt),_t_numequiv.bajo.isEqual(numequiv)),_t_cantpalabras.bajo.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.hacerparejas); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.normal.isEqual(punt),_t_numequiv.bajo.isEqual(numequiv)),_t_cantpalabras.medio.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.hacerparejas); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.normal.isEqual(punt),_t_numequiv.bajo.isEqual(numequiv)),_t_cantpalabras.alto.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.memorizarpalabra); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.normal.isEqual(punt),_t_numequiv.alto.isEqual(numequiv)),_t_cantpalabras.bajo.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.buscarpalabra); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.normal.isEqual(punt),_t_numequiv.alto.isEqual(numequiv)),_t_cantpalabras.medio.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.hacerparejas); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.normal.isEqual(punt),_t_numequiv.alto.isEqual(numequiv)),_t_cantpalabras.alto.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.hacerparejas); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.alto.isEqual(punt),_t_numequiv.bajo.isEqual(numequiv)),_t_cantpalabras.bajo.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.hacerparejas); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.alto.isEqual(punt),_t_numequiv.bajo.isEqual(numequiv)),_t_cantpalabras.medio.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.memorizarpalabra); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.alto.isEqual(punt),_t_numequiv.bajo.isEqual(numequiv)),_t_cantpalabras.alto.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.memorizarpalabra); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.alto.isEqual(punt),_t_numequiv.alto.isEqual(numequiv)),_t_cantpalabras.bajo.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.hacerparejas); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.alto.isEqual(punt),_t_numequiv.alto.isEqual(numequiv)),_t_cantpalabras.medio.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.hacerparejas); _i_dificultad++;
  _rl = _op.and(_op.and(_t_punt.alto.isEqual(punt),_t_numequiv.alto.isEqual(numequiv)),_t_cantpalabras.alto.isEqual(cantpalabras));
  dificultad.set(_i_dificultad,_rl, _t_dificultad.memorizarpalabra); _i_dificultad++;
  MembershipFunction[] _output = new MembershipFunction[1];
  _output[0] = new FuzzySingleton(dificultad.defuzzify());
  return _output;
 }

 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//
 //               Fuzzy Inference Engine                //
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//

 public double[] crispInference(double[] _input) {
  MembershipFunction punt = new FuzzySingleton(_input[0]);
  MembershipFunction numequi = new FuzzySingleton(_input[1]);
  MembershipFunction cantpalabras = new FuzzySingleton(_input[2]);
  MembershipFunction dificultad;
  MembershipFunction[] _call;
  _call = RL_misreglas(punt,numequi,cantpalabras); dificultad=_call[0];
  double _output[] = new double[1];
  if(dificultad instanceof FuzzySingleton)
   _output[0] = ((FuzzySingleton) dificultad).getValue();
  else _output[0] = ((OutputMembershipFunction) dificultad).defuzzify();
  return _output;
 }

 public double[] crispInference(MembershipFunction[] _input) {
  MembershipFunction punt = _input[0];
  MembershipFunction numequi = _input[1];
  MembershipFunction cantpalabras = _input[2];
  MembershipFunction dificultad;
  MembershipFunction[] _call;
  _call = RL_misreglas(punt,numequi,cantpalabras); dificultad=_call[0];
  double _output[] = new double[1];
  if(dificultad instanceof FuzzySingleton)
   _output[0] = ((FuzzySingleton) dificultad).getValue();
  else _output[0] = ((OutputMembershipFunction) dificultad).defuzzify();
  return _output;
 }

 public MembershipFunction[] fuzzyInference(double[] _input) {
  MembershipFunction punt = new FuzzySingleton(_input[0]);
  MembershipFunction numequi = new FuzzySingleton(_input[1]);
  MembershipFunction cantpalabras = new FuzzySingleton(_input[2]);
  MembershipFunction dificultad;
  MembershipFunction[] _call;
  _call = RL_misreglas(punt,numequi,cantpalabras); dificultad=_call[0];
  MembershipFunction _output[] = new MembershipFunction[1];
  _output[0] = dificultad;
  return _output;
 }

 public MembershipFunction[] fuzzyInference(MembershipFunction[] _input) {
  MembershipFunction punt = _input[0];
  MembershipFunction numequi = _input[1];
  MembershipFunction cantpalabras = _input[2];
  MembershipFunction dificultad;
  MembershipFunction[] _call;
  _call = RL_misreglas(punt,numequi,cantpalabras); dificultad=_call[0];
  MembershipFunction _output[] = new MembershipFunction[1];
  _output[0] = dificultad;
  return _output;
 }

}

